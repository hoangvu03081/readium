{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Readium API",
    "description": "Handsome backend devs"
  },
  "servers": [
    {
      "url": "http://localhost:5000/"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth endpoints"
    },
    {
      "name": "User",
      "description": "Users' endpoints"
    },
    {
      "name": "Profile",
      "description": "Users' profiles related endpoints"
    },
    {
      "name": "Collection",
      "description": "Users' collections related endpoints"
    },
    {
      "name": "Dev",
      "description": "Testing routes"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Dev"
        ],
        "summary": "Get all users",
        "description": "",
        "parameters": [],
        "responses": {}
      },
      "delete": {
        "tags": [
          "Dev"
        ],
        "summary": "Delete all users",
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/collections": {
      "get": {
        "tags": [
          "Dev"
        ],
        "summary": "Get all users' collections",
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/": {
      "delete": {
        "tags": [
          "Dev"
        ],
        "summary": "Delete all data",
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/auth/": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User Login",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Login successfully"
          },
          "400": {
            "description": "Wrong password"
          },
          "404": {
            "description": "Could not find user"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUser"
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "User Logout",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successfully"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User Register by email",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Account created"
          },
          "400": {
            "description": "Email has already been used or fields have errors"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUser"
              }
            }
          }
        }
      }
    },
    "/auth/confirm": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "User CONFIRM their account",
        "description": "",
        "parameters": [
          {
            "name": "iv",
            "in": "query",
            "type": "string",
            "required": "true"
          },
          {
            "name": "id",
            "in": "query",
            "type": "string",
            "description": "hashed user id",
            "required": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Activate successfully"
          },
          "400": {
            "description": "Account has already activated"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth\r/facebook": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "User Login by Facebook",
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/auth\r/google": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Login Google",
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/auth/forget": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Users forget password",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request change password successfully or User not found but Mlem "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Email"
              }
            }
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Users reset password",
        "description": "",
        "parameters": [
          {
            "name": "iv",
            "in": "query",
            "type": "string",
            "required": "true"
          },
          {
            "name": "id",
            "in": "query",
            "type": "string",
            "description": "hashed user id",
            "required": "true"
          }
        ],
        "responses": {
          "400": {
            "description": "User not found but for security send 400"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          }
        }
      }
    },
    "/users/protected": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Route for testing authenticated users",
        "description": "",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/following/posts": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get following posts from following authors",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "A page = 10 posts"
          },
          {
            "name": "utc",
            "in": "query",
            "type": "string",
            "description": "utc date string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get posts"
          },
          "500": {
            "description": "Error finding in mongodb"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/follow/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User follow users",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User Object ID string."
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "User should not follow him or herself && Please provide user id to follow other users"
          },
          "500": {
            "description": "Error saving changes to mongodb"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/recommended": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get recommended writers",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully recommend users"
          },
          "500": {
            "description": "Error while finding in mongoose."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/change-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User change password",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Saving changed password successfully"
          },
          "400": {
            "description": "Typed in wrong password or the password and password2 is not match"
          },
          "500": {
            "description": "Saving user to mongodb has some errors"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        }
      }
    },
    "/users/profile/": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get my profile",
        "description": "",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Profile"
        ],
        "summary": "Edit profile",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully edit profile"
          },
          "400": {
            "description": "User input displayName with errors"
          },
          "500": {
            "description": "Some errors occured when saving to mongodb"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditProfile"
              }
            }
          }
        }
      }
    },
    "/users/profile/?": {
      "patch": {
        "tags": [
          "Profile"
        ],
        "summary": "Edit subfield",
        "description": "",
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "biography",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "job",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "User input displayName with errors"
          },
          "500": {
            "description": "Some errors occured when saving to mongodb"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditProfile"
              }
            }
          }
        }
      }
    },
    "/users/profile\r/": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Upload avatar",
        "description": "",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "file"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/profile/{profileId}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get others",
        "description": "",
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/profile/avatar/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get specific user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "user id"
          }
        ],
        "responses": {
          "200": {
            "description": "Send back user avatar"
          },
          "400": {
            "description": "Send back user avatar"
          },
          "500": {
            "description": "Object Id is error or mongodb error"
          }
        }
      }
    },
    "/users/collections/": {
      "post": {
        "tags": [
          "Collection"
        ],
        "summary": "Create new collection",
        "description": "",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "default": "collection name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/collections/posts": {
      "post": {
        "tags": [
          "Collection"
        ],
        "summary": "Add post to collection",
        "description": "",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostToCollection"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Collection"
        ],
        "summary": "Delete post from collection",
        "description": "",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostToCollection"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "displayName": {
            "type": "string",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "example": "johnpassword"
          },
          "biography": {
            "type": "string",
            "example": "Hello, I'm a software engineer"
          },
          "job": {
            "type": "string",
            "example": "Software enginner"
          },
          "avatar": {
            "type": "string",
            "example": "bytes"
          },
          "followers": {
            "type": "array",
            "example": [
              "user1Id",
              "user2Id"
            ],
            "items": {
              "type": "string"
            }
          },
          "followings": {
            "type": "array",
            "example": [
              "user1Id",
              "user2Id"
            ],
            "items": {
              "type": "string"
            }
          },
          "notifications": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string",
                  "example": "user1Id"
                },
                "content": {
                  "type": "string",
                  "example": "user1 hates you"
                },
                "url": {
                  "type": "string",
                  "example": "http://localhost:5000/hackyourfacebook"
                }
              }
            }
          },
          "activationLink": {
            "type": "string",
            "example": "http://localhost:5000/auth/activate/:id"
          },
          "activated": {
            "type": "boolean",
            "example": false
          },
          "collections": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Default Collection"
                },
                "posts": {
                  "type": "array",
                  "example": [],
                  "items": {}
                }
              }
            }
          }
        },
        "required": [
          "email",
          "displayName"
        ]
      },
      "RegisterUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "testing"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "testing"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ChangePassword": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "example": "testing"
          },
          "password": {
            "type": "string",
            "example": "testing123"
          },
          "password2": {
            "type": "string",
            "example": "testing123"
          }
        },
        "required": [
          "oldPassword",
          "password",
          "password2"
        ]
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "testing123"
          }
        },
        "required": [
          "password"
        ]
      },
      "EditProfile": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "John Updated Doe"
          },
          "biography": {
            "type": "string",
            "example": "I'm being updated in Edit profile endpoint."
          },
          "job": {
            "type": "string",
            "example": "Neet"
          }
        }
      },
      "Email": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "PostToCollection": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string",
            "example": "post object id"
          },
          "collectionName": {
            "type": "string",
            "example": "collection name"
          }
        },
        "required": [
          "postId",
          "collectionName"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}